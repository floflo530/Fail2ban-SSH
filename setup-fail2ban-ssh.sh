#!/bin/sh
# Fail2ban setup for Debian 12 (SSH focus)
# POSIX /bin/sh, ASCII only.

set -eu

# ---------- Defaults ----------
BANTIME="1h"
FINDTIME="10m"
MAXRETRY="5"
SSH_PORT=""
IGNORE_IPS="127.0.0.1/8 ::1 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"
BANACTION=""   # auto-selected
BACKEND=""     # auto-selected

# ---------- Help ----------
usage() {
cat <<EOF
Usage: setup-fail2ban-ssh.sh [options]

Options:
  --bantime DURATION     default: 1h   ex: 15m, 1h, 24h, 1d
  --findtime DURATION    default: 10m
  --maxretry N           default: 5
  --ssh-port PORT        override SSH port (auto-detected if omitted)
  --ignore-ip IP/CIDR    add whitelist entry (repeatable)
  -h, --help             show this help

Examples:
  ./setup-fail2ban-ssh.sh --ignore-ip 1.2.3.4 --ignore-ip 10.0.0.0/8
  ./setup-fail2ban-ssh.sh --bantime 1d --findtime 20m --maxretry 4
EOF
}

# ---------- Root check ----------
require_root() {
  if [ "$(id -u)" -ne 0 ]; then
    echo "Ce script doit etre execute en root." >&2
    exit 1
  fi
}

# ---------- Arg parsing ----------
while [ $# -gt 0 ]; do
  case "$1" in
    --bantime)   BANTIME="${2:-}"; shift 2 ;;
    --findtime)  FINDTIME="${2:-}"; shift 2 ;;
    --maxretry)  MAXRETRY="${2:-}"; shift 2 ;;
    --ssh-port)  SSH_PORT="${2:-}"; shift 2 ;;
    --ignore-ip) IGNORE_IPS="$IGNORE_IPS ${2:-}"; shift 2 ;;
    -h|--help)   usage; exit 0 ;;
    *) echo "Option inconnue: $1"; usage; exit 1 ;;
  esac
done

# ---------- Detect SSH port ----------
detect_ssh_port() {
  if [ -n "$SSH_PORT" ]; then
    return
  fi
  if command -v sshd >/dev/null 2>&1; then
    SSH_PORT_DET="$(sshd -T 2>/dev/null | awk '/^port /{print $2; exit}')"
    if [ -n "${SSH_PORT_DET:-}" ]; then
      SSH_PORT="$SSH_PORT_DET"
      return
    fi
  fi
  if [ -r /etc/ssh/sshd_config ]; then
    SSH_PORT_PARSE="$(awk '/^[[:space:]]*Port[[:space:]]+/ {p=$2} END{if(p)print p}' /etc/ssh/sshd_config 2>/dev/null || true)"
    if [ -n "${SSH_PORT_PARSE:-}" ]; then
      SSH_PORT="$SSH_PORT_PARSE"
    fi
  fi
  [ -n "$SSH_PORT" ] || SSH_PORT="22"
}

# ---------- Package install ----------
install_packages() {
  echo "Installation des paquets..."
  export DEBIAN_FRONTEND=noninteractive
  apt-get update -y
  # fail2ban + helpers
  apt-get install -y fail2ban python3-systemd nftables
  # enable nftables (harmless if already enabled)
  systemctl enable --now nftables >/dev/null 2>&1 || true
}

# ---------- Select banaction ----------
select_banaction() {
  # Prefer nftables if action exists or nft command available
  if [ -f /etc/fail2ban/action.d/nftables.conf ] || command -v nft >/dev/null 2>&1; then
    BANACTION="nftables"
    return
  fi
  # Fallbacks
  if [ -f /etc/fail2ban/action.d/iptables-multiport.conf ]; then
    BANACTION="iptables-multiport"
  else
    BANACTION="iptables-allports"
  fi
}

# ---------- Select backend ----------
select_backend() {
  # Use systemd if python3-systemd import works
  if command -v python3 >/dev/null 2>&1 && \
python3 - <<PY 2>/dev/null
import sys
try:
    import systemd.journal  # noqa
    sys.exit(0)
except Exception:
    sys.exit(1)
PY
  then
    BACKEND="systemd"
  else
    BACKEND="auto"
  fi
}

# ---------- Write config ----------
write_config() {
  echo "Ecriture de /etc/fail2ban/jail.local..."
  mkdir -p /etc/fail2ban
  chmod 755 /etc/fail2ban

  cat > /etc/fail2ban/jail.local <<EOF
# Generated by setup-fail2ban-ssh.sh
[DEFAULT]
bantime  = ${BANTIME}
findtime = ${FINDTIME}
maxretry = ${MAXRETRY}
ignoreip = ${IGNORE_IPS}
banaction = ${BANACTION}
backend = ${BACKEND}
# Email notifications (optional):
# destemail = root@localhost
# sender = fail2ban@\$(hostname -f)
# action = %(action_mwl)s

[sshd]
enabled = true
port = ${SSH_PORT}
# With backend=systemd, logpath is not required.
EOF
}

# ---------- Start service ----------
start_and_check() {
  systemctl enable fail2ban >/dev/null 2>&1 || true
  systemctl restart fail2ban || true
  sleep 2

  if systemctl is-active --quiet fail2ban; then
    echo "Fail2ban actif."
  else
    echo "Echec demarrage. Logs suivants:"
    journalctl -u fail2ban -n 200 --no-pager || true
    exit 1
  fi
}

# ---------- Show status ----------
show_status() {
  echo
  echo "Etat service:"
  systemctl --no-pager -l status fail2ban || true
  echo
  echo "Etat global:"
  fail2ban-client status || true
  echo
  echo "Etat jail sshd:"
  fail2ban-client status sshd || true
}

main() {
  require_root
  detect_ssh_port
  install_packages
  select_banaction
  select_backend
  write_config
  start_and_check
  show_status
  echo
  echo "Termine."
}

main
